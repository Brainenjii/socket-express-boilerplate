"use strict";
var me, app, io, url = require("url"), util = require("util"),
  _ = require("lodash");
me = module.exports = {
  routes: [],
  init: function (env) {
    app = env.app;
    io = env.io;
  },
  socketHandler: function (request, socket, callback) {
    if (request.mgr === "support" && request.action === "get") {
      callback(null, {reponse: "pong"});
      return;
    }
    var route = _.find(me.routes, {
      path: request.path,
      method: request.method
    });
    if (route) {
      route.handler(_.extend(request.arg || {}, {socket: socket}), callback);
    }
  },
  ajaxHandler: function (req, res) {
    var result, json, field;
    for (field in req.params) {
      if (req.params.hasOwnProperty(field)) {
        req.args[field] = req.params[field];
      }
    }

    if (req.body) {_.extend(req.args, req.body); }
    if (req.args.json && req.args.data) {
      try {
        json = JSON.parse(req.args.data);
      } catch (err) {
        res.send(400, err);
      }
      if (typeof json === "object") {
        _.extend(json, req.args);
        req.args = json;
      } else {
        req.args.info = json || {};
      }
      delete req.args.json;
      delete req.args.data;
    }
    if (req.files) {
      _.extend(req.args, {files: req.files});
    }
    result = this.handler(req.args,
      function (err, data) {
        if (res.sended) {
          util.debug("shit was happen");
          return;
        }
        if (err) {
          res.status(err.code || 500).send(err);
        } else {
          res.status(200).send(typeof data === "object" ? JSON.stringify(data)
            : data);
        }
      });
    if (result !== undefined) {
      res.sended = true;
      res.json(result);
    }
  },
  corsHandler: function (req, res, next) {
    var args = {
      ip: req.headers['x-forwarded-for'] || req.connection.remoteAddress
    };

    _.extend(args, req.query);
    _.extend(args, url.parse(req.url, true).query);
    req.args = args;

    res.header("Access-Control-Allow-Origin", req.headers.origin);
    res.header("Access-Control-Allow-Methods", "GET,PUT,POST,DELETE");
    res.header("Access-Control-Allow-Credentials", "true");
    res.header("Access-Control-Allow-Headers",
      "X-Requested-With,Content-Type");
    next();
  }, /**
   *
   * @param {Object} manager
   * @param {String} filename
   * @param {Object} config
   * @param {Array} [path]
   */
  registerRoute: function (manager, filename, config, path) {
    path = path || [];
    _.each(config, function (handler, method) {
      if (typeof handler === "function") {
        if (app) {
          app[method]("/" + path.join("/"),
          me.ajaxHandler.bind({handler: handler.bind(manager)}));
        }
        if (io) {
          me.routes.push({method: method, path: "/" + path.join("/"),
            handler: handler.bind(manager)});
        }
      } else {
        me.registerRoute(manager, filename, handler,
          path.concat([(path.length % 2 ? ":" : "") + method]));
      }
    });
  }
};